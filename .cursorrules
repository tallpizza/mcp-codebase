# MCP Codebase 프로젝트 규칙

## 프로젝트 패턴

1. **CLI 모드와 서버 모드 구분**
   - `--refresh` 플래그: CLI 모드로 코드베이스 분석만 실행
   - 플래그 없음: MCP 서버 모드로 실행
   - 명령어 모드: `create-project`, `list-projects` 등 CLI 명령어 실행

2. **프로젝트 ID 처리**
   - 환경 변수 `PROJECT_ID`를 통해 현재 작업 프로젝트 전달
   - 커맨드 라인 인자 처리: `--project_id=<id>` 또는 `--project_id <id>` 또는 첫 번째 위치 인자

3. **코드베이스 변경 감지**
   - Git 커밋 해시를 사용하여 변경 사항 추적
   - 프로젝트별로 마지막 분석된 커밋 해시 저장
   - 변경된 파일만 선택적으로 재분석

4. **CLI 명령어 처리**
   - 명령어 기반 구조: `<command>` + `[args...]`
   - 인자 파싱 및 검증 단계 분리
   - 도움말 및 사용법 자동 생성
   - 명령어별 옵션 정의

5. **프로젝트 관리 서비스**
   - 프로젝트 관리 기능을 MCP 도구에서 서비스로 이전
   - CLI를 통해서만 프로젝트 관리 기능 노출
   - 모든 프로젝트는 Git 저장소여야 함
   - 프로젝트 생성 시 절대 경로 지원

## 기술 선호도

1. **코드 스타일**
   - 2칸 들여쓰기
   - 세미콜론 사용
   - camelCase 변수명
   - TypeScript strict 모드

2. **패턴 및 베스트 프랙티스**
   - 싱글톤 패턴: 서비스 클래스용
   - 리포지토리 패턴: 데이터 액세스용
   - 도구 인터페이스: MCP 도구 구현
   - 커맨드 패턴: CLI 명령어 구현
   - 서비스 패턴: 비즈니스 로직 캡슐화
   - 오류 처리: 상세 오류 메시지 및 적절한 스택 트레이스

3. **파일 구조**
   - `src/`: 소스 코드
   - `src/tools/`: MCP 도구 구현
   - `src/services/`: 비즈니스 로직
   - `src/cli/`: CLI 명령어 파서 및 실행기
   - `src/db/`: 데이터베이스 관련
   - `src/types/`: 타입 정의
   - `src/repositories/`: 데이터 액세스 로직

## 알려진 과제

1. **CLI 확장 작업**
   - 프로젝트 삭제 명령어 구현 필요
   - 프로젝트 상태 확인 명령어 구현 필요
   - 복잡한 검색 필터링 명령어 구현 필요

2. **Git 통합 확장**
   - 원격 Git 저장소 지원 추가 필요
   - 브랜치별 분석 기능 구현 필요
   - 대규모 Git 저장소 처리 최적화 필요

3. **성능 최적화 필요**
   - 임베딩 생성 병렬화 구현 필요
   - 벡터 검색 성능 개선 필요
   - 캐싱 전략 구현 필요

4. **아키텍처 개선**
   - MCP 도구와 서비스 계층 간 명확한 분리 필요
   - 도구 계층의 간소화 및 표준화 필요
   - 프로젝트 서비스와 리포지토리 관계 정립 필요

## 중요 구현 경로

1. **프로젝트 서비스 구현**
   - 프로젝트 서비스 생성 (`src/services/projectService.ts`)
   - MCP 도구에서 프로젝트 관리 기능 이전
   - Git 저장소 검증 로직 추가
   - CLI 명령어와 연동

2. **CLI 명령어 확장**
   - 프로젝트 삭제 명령어 구현 (`src/cli/index.ts`)
   - 프로젝트 상태 확인 명령어 구현 (`src/cli/index.ts`)
   - 고급 검색 명령어 구현 (`src/cli/index.ts`)

3. **Git 통합 확장**
   - 원격 Git 저장소 지원 구현 (`src/services/gitService.ts`)
   - 브랜치별 분석 기능 추가 (`src/services/gitService.ts`)
   - 변경 내용 요약 기능 구현 (`src/services/gitService.ts`)

4. **성능 개선**
   - 임베딩 생성 병렬화 구현 (`src/services/embeddingService.ts`)
   - 캐싱 시스템 도입 (`src/services/cacheService.ts`)
   - 벡터 검색 최적화 (`src/repositories/codeChunkRepository.ts`) 